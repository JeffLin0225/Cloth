package com.cloth.Controller;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/ajax/pages")
@CrossOrigin
public class ProductAjaxController {
    @Autowired
    private ProductService productService;

    @GetMapping("/products/name/{name}")
    public String existsByName(@PathVariable(name="name") String name) {
        JSONObject responseBody = new JSONObject();

        if(name==null || name.length()==0) {
            responseBody.put("success", false);
            responseBody.put("message", "Name是必要欄位");
        } else {
            boolean exists = productService.existsByName(name);
            if(exists) {
                responseBody.put("success", false);
                responseBody.put("message", "Name已存在");
            } else {
                responseBody.put("success", true);
                responseBody.put("message", "Name OK、可以使用");
            }
        }
        return responseBody.toString();
    }

    @DeleteMapping("/products/{id}")
    public String remove(@PathVariable Integer id) {
        JSONObject responseBody = new JSONObject();
        if(id==null) {
            responseBody.put("success", false);
            responseBody.put("message", "Id是必要欄位");
        } else {
            if(!productService.exists(id)) {
                responseBody.put("success", false);
                responseBody.put("message", "Id不存在");
            } else {
                if(!productService.remove(id)) {
                    responseBody.put("success", false);
                    responseBody.put("message", "刪除失敗");
                } else {
                    responseBody.put("success", true);
                    responseBody.put("message", "刪除成功");
                }
            }
        }
        return responseBody.toString();
    }

    @PutMapping("/products/{id}")
    public String modify(@PathVariable Integer id, @RequestBody String body) {
        JSONObject responseBody = new JSONObject();
        if(id==null) {
            responseBody.put("success", false);
            responseBody.put("message", "Id是必要欄位");
        } else {
            if(!productService.exists(id)) {
                responseBody.put("success", false);
                responseBody.put("message", "Id不存在");
            } else {
                ProductBean product = productService.modify(body);
                if(product==null) {
                    responseBody.put("success", false);
                    responseBody.put("message", "修改失敗");
                } else {
                    responseBody.put("success", true);
                    responseBody.put("message", "修改成功");
                }
            }
        }
        return responseBody.toString();
    }

    @PostMapping("/products")
    public String create(@RequestBody String body) {
        JSONObject responseBody = new JSONObject();

        JSONObject obj = new JSONObject(body);
        Integer id = obj.isNull("id") ? null : obj.getInt("id");

        if(id==null) {
            responseBody.put("success", false);
            responseBody.put("message", "Id是必要欄位");
        } else {
            if(productService.exists(id)) {
                responseBody.put("success", false);
                responseBody.put("message", "Id已存在");
            } else {
                ProductBean product = productService.create(body);
                if(product==null) {
                    responseBody.put("success", false);
                    responseBody.put("message", "新增失敗");
                } else {
                    responseBody.put("success", true);
                    responseBody.put("message", "新增成功");
                }
            }
        }
        return responseBody.toString();
    }

    @GetMapping("/products/{pk}")
    public String findById(@PathVariable(name = "pk") Integer id) {
        JSONObject responseBody = new JSONObject();
        JSONArray array = new JSONArray();

        ProductBean product = productService.findById(id);
        if(product!=null) {
            String make = DatetimeConverter.toString(product.getMake(), "yyyy-MM-dd");
            JSONObject item = new JSONObject()
                    .put("id", product.getId())
                    .put("name", product.getName())
                    .put("price", product.getPrice())
                    .put("make", make)
                    .put("expire", product.getExpire());
            array = array.put(item);
        }

        responseBody.put("list", array);
        return responseBody.toString();
    }

    @PostMapping("/products/find")
    public String find(@RequestBody String body) {
        JSONObject responseBody = new JSONObject();

        JSONArray array = new JSONArray();
        List<ProductBean> products = productService.find(body);
        if(products!=null && !products.isEmpty()) {
            for(ProductBean product : products) {
                String make = DatetimeConverter.toString(product.getMake(), "yyyy-MM-dd");
                JSONObject item = new JSONObject()
                        .put("id", product.getId())
                        .put("name", product.getName())
                        .put("price", product.getPrice())
                        .put("make", make)
                        .put("expire", product.getExpire());
                array = array.put(item);
            }
        }

        long count = productService.count(body);
        responseBody.put("count", count);
        responseBody.put("list", array);

        return responseBody.toString();
    }
}
